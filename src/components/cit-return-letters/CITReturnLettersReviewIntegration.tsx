// CIT Return Letters Review System Integration
// Component to handle review submission and feedback for CIT return letters

'use client';

import React, { useState } from 'react';
import { ReviewSubmissionModal } from '@/components/review-system/modals/ReviewSubmissionModal';
import { FeedbackModal } from '@/components/review-system/modals/FeedbackModal';
import { useReviewSystemConfig } from '@/lib/config/review-system';
import { Application, ReviewSubmission } from '@/types/review-system';
import { CITReturnLettersData } from '@/types/cit-return-letters';
import { toast } from 'sonner';

interface CITReturnLettersReviewIntegrationProps {
  citData: CITReturnLettersData;
  onEditForm?: () => void;
  children?: React.ReactNode;
}

export const CITReturnLettersReviewIntegration: React.FC<CITReturnLettersReviewIntegrationProps> = ({
  citData,
  onEditForm,
  children
}) => {
  const config = useReviewSystemConfig();
  const [showReviewSubmission, setShowReviewSubmission] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackApplication, setFeedbackApplication] = useState<Application | null>(null);

  // Don't render if CIT return letters review is disabled
  if (!config.canUseCITReturnLettersReview) {
    return <>{children}</>;
  }

  const getApplicationTitle = (): string => {
    if (!citData.selectedClient || !citData.letterType) return 'CIT Return Letters';
    
    const date = new Date(citData.letterDate || new Date());
    const yy = date.getFullYear().toString().slice(-2);
    const mm = (date.getMonth() + 1).toString().padStart(2, '0');
    const dd = date.getDate().toString().padStart(2, '0');
    const formattedDate = `${yy}${mm}${dd}`;
    
    const companyShortName = citData.selectedClient?.company_name_short || 'Company';
    const letterType = citData.letterType || 'Letter';
    
    return `${formattedDate} ${companyShortName} CIT ${letterType}`;
  };

  const handleSubmitForReview = async (submission: ReviewSubmission): Promise<boolean> => {
    try {
      // Validate CIT return letters data
      if (!citData.selectedClient) {
        toast.error('Please select a client before submitting for review');
        return false;
      }

      if (!citData.letterType) {
        toast.error('Please select a letter type before submitting for review');
        return false;
      }

      if (!citData.letterDate) {
        toast.error('Please select a letter date before submitting for review');
        return false;
      }

      if (!citData.taxPeriodStart || !citData.taxPeriodEnd) {
        toast.error('Please select tax period dates before submitting for review');
        return false;
      }

      // Submit application for review
      const response = await fetch('/api/review-system/applications', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'cit-return-letters',
          title: getApplicationTitle(),
          form_data: citData,
          reviewer_id: submission.reviewer_id,
          urgency: submission.urgency,
          submitter_message: submission.comments || undefined,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Failed to submit application for review');
      }

      toast.success('CIT return letters submitted for review successfully!');
      return true;

    } catch (error) {
      console.error('Failed to submit CIT return letters for review:', error);
      toast.error(error instanceof Error ? error.message : 'Failed to submit for review');
      return false;
    }
  };

  const handleShowFeedback = (application: Application) => {
    setFeedbackApplication(application);
    setShowFeedback(true);
  };

  const openReviewSubmission = () => {
    setShowReviewSubmission(true);
  };

  return (
    <>
      {children}

      {/* Review Submission Modal */}
      <ReviewSubmissionModal
        isOpen={showReviewSubmission}
        onClose={() => setShowReviewSubmission(false)}
        applicationId="new" // Will be generated by API
        applicationTitle={getApplicationTitle()}
        documentType="cit-return-letters"
        onSubmit={handleSubmitForReview}
      />

      {/* Feedback Modal */}
      <FeedbackModal
        isOpen={showFeedback}
        onClose={() => setShowFeedback(false)}
        application={feedbackApplication}
        onEditForm={onEditForm}
      />
    </>
  );
};

// Hook for easy integration
export const useCITReturnLettersReview = () => {
  const [integration, setIntegration] = useState<any>(null);

  const submitForReview = () => {
    if (integration) {
      integration.openReviewSubmission();
    }
  };

  const showFeedback = (application: Application) => {
    if (integration) {
      integration.handleShowFeedback(application);
    }
  };

  return {
    submitForReview,
    showFeedback,
    setIntegration
  };
};

export default CITReturnLettersReviewIntegration;