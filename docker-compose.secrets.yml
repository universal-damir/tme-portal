version: '3.8'

services:
  # TME Portal Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://tme_user:${POSTGRES_PASSWORD}@postgres:5432/tme_portal
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=http://localhost:3000  # HTTP for local network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - tme_network
    volumes:
      - app_uploads:/app/public/uploads
    secrets:
      - postgres_password
      - redis_password
      - nextauth_secret

  # PostgreSQL Database  
  postgres:
    image: postgres:15-alpine
    # No external port exposure - internal access only
    environment:
      - POSTGRES_DB=tme_portal
      - POSTGRES_USER=tme_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
      - TZ=UTC
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    restart: unless-stopped
    networks:
      - tme_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tme_user -d tme_portal"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres 
      -c log_statement=all
      -c log_destination=stderr
      -c log_min_duration_statement=1000
      -c shared_preload_libraries=pg_stat_statements
      -c timezone=UTC
    secrets:
      - postgres_password

  # Redis Cache for Sessions
  redis:
    image: redis:7-alpine
    # No external port exposure - internal access only
    command: >
      sh -c 'redis-server 
      --requirepass "$$(cat /run/secrets/redis_password)"
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000'
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - tme_network
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -a $$(cat /run/secrets/redis_password) ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    secrets:
      - redis_password

  # Database backup service
  backup:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=tme_user
      - POSTGRES_DB=tme_portal
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/backup-encrypted.sh:/backup.sh
    networks:
      - tme_network
    entrypoint: ["sh", "/backup.sh"]
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
    secrets:
      - postgres_password

# Docker secrets for secure credential management
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  nextauth_secret:
    file: ./secrets/nextauth_secret.txt

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local

networks:
  tme_network:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.20.0.0/16